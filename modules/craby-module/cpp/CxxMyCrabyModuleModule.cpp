// Auto generated by Craby. DO NOT EDIT.
#include "CxxMyCrabyModuleModule.hpp"

#include <thread>
#include <react/bridging/Bridging.h>

#include "cxx.h"
#include "ffi.rs.h"
#include "bridging-generated.hpp"
#include "utils.hpp"

using namespace facebook;

namespace craby {
namespace mycrabymodule {

CxxMyCrabyModuleModule::CxxMyCrabyModuleModule(
    std::shared_ptr<react::CallInvoker> jsInvoker)
    : TurboModule(CxxMyCrabyModuleModule::kModuleName, jsInvoker) {
  // No signals
  callInvoker_ = std::move(jsInvoker);

  methodMap_["addNumbers"] = MethodMetadata{2, &CxxMyCrabyModuleModule::addNumbers};
  methodMap_["addStrings"] = MethodMetadata{2, &CxxMyCrabyModuleModule::addStrings};
}

CxxMyCrabyModuleModule::~CxxMyCrabyModuleModule() {
  // No signals
}

jsi::Value CxxMyCrabyModuleModule::addNumbers(jsi::Runtime &rt,
                                react::TurboModule &turboModule,
                                const jsi::Value args[],
                                size_t count) {
  auto &thisModule = static_cast<CxxMyCrabyModuleModule &>(turboModule);
  auto callInvoker = thisModule.callInvoker_;

  try {
    if (2 != count) {
      throw jsi::JSError(rt, "Expected 2 arguments");
    }

    uintptr_t id_ = reinterpret_cast<uintptr_t>(&thisModule);
    auto arg0 = react::bridging::fromJs<double>(rt, args[0], callInvoker);
    auto arg1 = react::bridging::fromJs<double>(rt, args[1], callInvoker);
    auto ret = craby::bridging::addNumbers(id_, arg0, arg1);

    return react::bridging::toJs(rt, ret);
  } catch (const jsi::JSError &err) {
    throw err;
  } catch (const std::exception &err) {
    throw jsi::JSError(rt, errorMessage(err));
  }
}

jsi::Value CxxMyCrabyModuleModule::addStrings(jsi::Runtime &rt,
                                react::TurboModule &turboModule,
                                const jsi::Value args[],
                                size_t count) {
  auto &thisModule = static_cast<CxxMyCrabyModuleModule &>(turboModule);
  auto callInvoker = thisModule.callInvoker_;

  try {
    if (2 != count) {
      throw jsi::JSError(rt, "Expected 2 arguments");
    }

    uintptr_t id_ = reinterpret_cast<uintptr_t>(&thisModule);
    auto arg0 = react::bridging::fromJs<rust::String>(rt, args[0], callInvoker);
    auto arg1 = react::bridging::fromJs<rust::String>(rt, args[1], callInvoker);
    auto ret = craby::bridging::addStrings(id_, arg0, arg1);

    return react::bridging::toJs(rt, ret);
  } catch (const jsi::JSError &err) {
    throw err;
  } catch (const std::exception &err) {
    throw jsi::JSError(rt, errorMessage(err));
  }
}

} // namespace mycrabymodule
} // namespace craby
